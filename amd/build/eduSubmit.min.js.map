{"version":3,"file":"eduSubmit.min.js","sources":["../src/eduSubmit.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Script eduSubmit.js\n *\n * @module      tiny_edusharing/eduSubmit\n * @copyright   2024 metaVentis GmbH <http://metaventis.com>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n * This script contains all logic to be executed when the user saves the changes they made in the editor\n * by clicking the \"save changes\" button.\n * It also contains the logic for keeping score of es elements already present in the section opened.\n */\n\nimport {getCourseId} from \"./options\";\nimport {addEduSharingInstance, deleteEduSharingInstance, updateInstance} from \"./repository\";\nimport Config from 'core/config';\n\nexport const initEventHandler = (editor) => {\n    const container = editor.getContainer();\n    const form = container.closest(\"form\");\n    if (form !== null && typeof form.submit === \"function\") {\n        form.addEventListener('submit', async(event) => {\n            if (event.submitter.id === \"id_submitbutton\" || event.submitter.id === \"id_submitbutton2\") {\n                event.preventDefault();\n                await convertForSubmit(editor);\n                form.submit();\n            }\n        });\n    }\n};\n\n/**\n * The variable initialElements contains all existing es objects found when the editor is instantiated.\n * This is needed for bookkeeping.\n */\nlet initialElements = [];\n\nconst convertForSubmit = async(editor) => {\n    const iterateAsync = async domNode => {\n        if (domNode.hasChildNodes()) {\n            for (const node of domNode.childNodes) {\n                await iterateAsync(node);\n            }\n        }\n        if (domNode.classList !== undefined && domNode.classList.contains('edusharing_atto')) {\n            let link = domNode.getAttribute(domNode.nodeName.toLowerCase() === 'img' ? 'src' : 'href');\n            let uri = new URL(link);\n            let searchParams = uri.searchParams;\n            let indexOfElement = initialElements.indexOf(parseInt(searchParams.get('resourceId')));\n            if (indexOfElement >= 0) {\n                initialElements.splice(indexOfElement, 1);\n                if (domNode.getAttribute('data-edited') !== null && domNode.getAttribute('data-edited') !== \"\") {\n                    let ajaxParams = {\n                        eduStructure: {\n                            id: parseInt(searchParams.get('resourceId')),\n                            courseId: parseInt(getCourseId(editor)),\n                            objectUrl: searchParams.get('object_url')\n                        }\n                    };\n                    let response = await updateInstance(ajaxParams);\n                    if (response.id === undefined) {\n                        window.console.log('Error updating instance');\n                    }\n                    domNode.removeAttribute('data-edited');\n                }\n            } else {\n                let ajaxParams = {\n                    eduStructure: {\n                        name: searchParams.get('title'),\n                        objectUrl: searchParams.get('object_url'),\n                        courseId: parseInt(getCourseId(editor)),\n                        objectVersion: searchParams.get('window_version')\n                    }\n                };\n                let response = await addEduSharingInstance(ajaxParams);\n                if (response.id !== undefined) {\n                    let isImage = domNode.nodeName.toLowerCase() === 'img';\n                    let previewUrl = `${Config.wwwroot}/mod/edusharing/preview.php`\n                        + '?resourceId=' + response.id + '&' + searchParams.toString();\n                    domNode.setAttribute(isImage ? 'src' : 'href', previewUrl);\n                }\n            }\n        }\n    };\n    const container = window.document.createElement('div');\n    container.innerHTML = editor.getContent();\n    await iterateAsync(container);\n    editor.setContent(container.innerHTML);\n    for (const resourceId of initialElements) {\n        await deleteEduSharingInstance({\n            eduDeleteStructure: {\n                id: resourceId,\n                courseId: parseInt(getCourseId(editor))\n            }\n        });\n    }\n};\n\nexport const initExistingElements = editor => {\n    const iterate = domNode => {\n        if (domNode.hasChildNodes()) {\n            for (const node of domNode.childNodes) {\n                iterate(node);\n            }\n        }\n        if (domNode.classList !== undefined && domNode.classList.contains('edusharing_atto')) {\n            let link = domNode.getAttribute(domNode.nodeName.toLowerCase() === 'img' ? 'src' : 'href');\n            let uri = new URL(link);\n            initialElements.push(parseInt(uri.searchParams.get('resourceId')));\n        }\n    };\n    const container = window.document.createElement('div');\n    container.innerHTML = editor.getContent();\n    iterate(container);\n};\n"],"names":["editor","form","getContainer","closest","submit","addEventListener","async","event","submitter","id","preventDefault","convertForSubmit","initialElements","iterateAsync","domNode","hasChildNodes","node","childNodes","undefined","classList","contains","link","getAttribute","nodeName","toLowerCase","searchParams","URL","indexOfElement","indexOf","parseInt","get","splice","ajaxParams","eduStructure","courseId","objectUrl","window","console","log","removeAttribute","name","objectVersion","response","isImage","previewUrl","Config","wwwroot","toString","setAttribute","container","document","createElement","innerHTML","getContent","setContent","resourceId","eduDeleteStructure","iterate","uri","push"],"mappings":";;;;;;;;;;;8MA+BiCA,eAEvBC,KADYD,OAAOE,eACFC,QAAQ,QAClB,OAATF,MAAwC,mBAAhBA,KAAKG,QAC7BH,KAAKI,iBAAiB,UAAUC,MAAAA,QACD,oBAAvBC,MAAMC,UAAUC,IAAmD,qBAAvBF,MAAMC,UAAUC,KAC5DF,MAAMG,uBACAC,iBAAiBX,QACvBC,KAAKG,kBAUjBQ,gBAAkB,SAEhBD,iBAAmBL,MAAAA,eACfO,aAAeP,MAAAA,aACbQ,QAAQC,oBACH,MAAMC,QAAQF,QAAQG,iBACjBJ,aAAaG,cAGDE,IAAtBJ,QAAQK,WAA2BL,QAAQK,UAAUC,SAAS,mBAAoB,KAC9EC,KAAOP,QAAQQ,aAAgD,QAAnCR,QAAQS,SAASC,cAA0B,MAAQ,QAE/EC,aADM,IAAIC,IAAIL,MACKI,aACnBE,eAAiBf,gBAAgBgB,QAAQC,SAASJ,aAAaK,IAAI,mBACnEH,gBAAkB,MAClBf,gBAAgBmB,OAAOJ,eAAgB,GACK,OAAxCb,QAAQQ,aAAa,gBAAmE,KAAxCR,QAAQQ,aAAa,eAAuB,KACxFU,WAAa,CACbC,aAAc,CACVxB,GAAIoB,SAASJ,aAAaK,IAAI,eAC9BI,SAAUL,UAAS,wBAAY7B,SAC/BmC,UAAWV,aAAaK,IAAI,qBAIhBZ,WADC,8BAAec,aACvBvB,IACT2B,OAAOC,QAAQC,IAAI,2BAEvBxB,QAAQyB,gBAAgB,oBAEzB,KACCP,WAAa,CACbC,aAAc,CACVO,KAAMf,aAAaK,IAAI,SACvBK,UAAWV,aAAaK,IAAI,cAC5BI,SAAUL,UAAS,wBAAY7B,SAC/ByC,cAAehB,aAAaK,IAAI,oBAGpCY,eAAiB,qCAAsBV,oBACvBd,IAAhBwB,SAASjC,GAAkB,KACvBkC,QAA6C,QAAnC7B,QAAQS,SAASC,cAC3BoB,WAAa,UAAGC,gBAAOC,uCACrB,eAAiBJ,SAASjC,GAAK,IAAMgB,aAAasB,WACxDjC,QAAQkC,aAAaL,QAAU,MAAQ,OAAQC,gBAKzDK,UAAYb,OAAOc,SAASC,cAAc,OAChDF,UAAUG,UAAYpD,OAAOqD,mBACvBxC,aAAaoC,WACnBjD,OAAOsD,WAAWL,UAAUG,eACvB,MAAMG,cAAc3C,sBACf,wCAAyB,CAC3B4C,mBAAoB,CAChB/C,GAAI8C,WACJrB,SAAUL,UAAS,wBAAY7B,2CAMXA,eAC1ByD,QAAU3C,aACRA,QAAQC,oBACH,MAAMC,QAAQF,QAAQG,WACvBwC,QAAQzC,cAGUE,IAAtBJ,QAAQK,WAA2BL,QAAQK,UAAUC,SAAS,mBAAoB,KAC9EC,KAAOP,QAAQQ,aAAgD,QAAnCR,QAAQS,SAASC,cAA0B,MAAQ,QAC/EkC,IAAM,IAAIhC,IAAIL,MAClBT,gBAAgB+C,KAAK9B,SAAS6B,IAAIjC,aAAaK,IAAI,kBAGrDmB,UAAYb,OAAOc,SAASC,cAAc,OAChDF,UAAUG,UAAYpD,OAAOqD,aAC7BI,QAAQR"}