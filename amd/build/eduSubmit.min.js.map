{"version":3,"file":"eduSubmit.min.js","sources":["../src/eduSubmit.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Script eduSubmit.js\n *\n * @module      tiny_edusharing/eduSubmit\n * @copyright   2024 metaVentis GmbH <http://metaventis.com>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n * This script contains all logic to be executed when the user saves the changes they made in the editor\n * by clicking the \"save changes\" button.\n * It also contains the logic for keeping score of es elements already present in the section opened.\n */\n\nimport {getCourseId, getRepoId} from \"./options\";\nimport {addEduSharingInstance, deleteEduSharingInstance, updateInstance} from \"./repository\";\nimport Config from 'core/config';\nimport {renderForPromise} from 'core/templates';\nimport {component} from './common';\nimport {get_string as getString} from 'core/str';\nimport Modal from 'core/modal';\n\nexport const initEventHandler = (editor) => {\n    const container = editor.getContainer();\n    const form = container.closest(\"form\");\n    if (form !== null && typeof form.submit === \"function\") {\n        form.addEventListener('submit', async(event) => {\n            if (event.submitter.id === \"id_submitbutton\" || event.submitter.id === \"id_submitbutton2\") {\n                event.preventDefault();\n                await convertForSubmit(editor);\n                form.submit();\n            }\n        });\n    }\n};\n\n/**\n * The variable initialElements contains all existing es objects found when the editor is instantiated.\n * This is needed for bookkeeping.\n */\nlet initialElements = [];\n\nconst convertForSubmit = async(editor) => {\n    let showIframeRemovalDialog = false;\n    /**\n     * Recursively processes a DOM node and its children to handle specific cases related to\n     * ES embedding in various elements such as images, links, iframes, and text nodes. This function\n     * applies different processing strategies based on the type and attributes of each element encountered.\n     *\n     * @async\n     * @function iterateAsync\n     * @param {Node} domNode - The root DOM node to start the processing from. The function will recursively\n     *                         process all child nodes and handle specific cases based on node type and attributes.\n     * @returns {Promise<void>} A promise that resolves when all nodes in the subtree have been processed.\n     */\n    const iterateAsync = async domNode => {\n        /**\n         * Processes an added or edited ES DOM element. The function determines whether the element is new or updated\n         * based on its attributes and performs the required backend operations via AJAX calls. If the element is updated,\n         * it sends an update request. If the element is new, it sends a creation request and updates the DOM accordingly.\n         *\n         * @async\n         * @function\n         * @param {HTMLElement} domNode - The DOM node representing the element to process. This can be an image\n         * or a link element, which contains all necessary attributes for identifying and processing.\n         */\n        const processAddedOrEditedElement = async(domNode) => {\n            let link = domNode.getAttribute(domNode.nodeName.toLowerCase() === 'img' ? 'src' : 'href');\n            let uri = new URL(link);\n            let searchParams = uri.searchParams;\n            let indexOfElement = initialElements.indexOf(parseInt(searchParams.get('resourceId')));\n            if (indexOfElement >= 0) {\n                initialElements.splice(indexOfElement, 1);\n                if (domNode.getAttribute('data-edited') !== null && domNode.getAttribute('data-edited') !== \"\") {\n                    let ajaxParams = {\n                        eduStructure: {\n                            id: parseInt(searchParams.get('resourceId')),\n                            courseId: parseInt(getCourseId(editor)),\n                            objectUrl: searchParams.get('object_url')\n                        }\n                    };\n                    let response = await updateInstance(ajaxParams);\n                    if (response.id === undefined) {\n                        window.console.log('Error updating instance');\n                    }\n                    domNode.removeAttribute('data-edited');\n                }\n            } else {\n                let ajaxParams = {\n                    eduStructure: {\n                        name: searchParams.get('title'),\n                        objectUrl: searchParams.get('object_url'),\n                        courseId: parseInt(getCourseId(editor)),\n                        objectVersion: searchParams.get('window_version')\n                    }\n                };\n                let response = await addEduSharingInstance(ajaxParams);\n                if (response.id !== undefined) {\n                    let isImage = domNode.nodeName.toLowerCase() === 'img';\n                    let previewUrl = `${Config.wwwroot}/mod/edusharing/preview.php`\n                        + '?resourceId=' + response.id + '&' + searchParams.toString();\n                    domNode.setAttribute(isImage ? 'src' : 'href', previewUrl);\n                }\n            }\n        };\n        /**\n         * Processes a DOM text node, replacing or removing ES embedding iFrame elements.\n         *\n         * This function examines the text content of a given DOM node, parses it into a temporary div,\n         * and processes iframe elements that match specific criteria. If the iframe's `data-repo-id` attribute\n         * matches the connected repository, it replaces the iframe with new content or removes it if no replacement is available.\n         * Once processing is complete, it replaces the original DOM node with the updated content.\n         *\n         * @async\n         * @function\n         * @param {Node} domNode - The DOM node containing the text content to be processed.\n         * @returns {Promise<void>} - A promise that resolves when the processing is complete.\n         */\n        const processTextNode = async(domNode) => {\n            const tempDiv = document.createElement('div');\n            tempDiv.innerHTML = domNode.textContent;\n\n            const iframes = tempDiv.querySelectorAll('iframe.es-embed-iframe');\n            for (const iframe of iframes) {\n                if (iframe.getAttribute('data-repo-id') === getRepoId(editor)) {\n                    const replacement = await getIframeReplacementContent(editor, iframe);\n                    if (replacement !== '') {\n                        iframe.outerHTML = replacement;\n                    } else {\n                        iframe.remove();\n                        showIframeRemovalDialog = true;\n                    }\n                } else {\n                    iframe.remove();\n                    showIframeRemovalDialog = true;\n                }\n            }\n            if (iframes.length > 0) {\n                domNode.replaceWith(...tempDiv.childNodes);\n            }\n        };\n        /**\n         * Asynchronously processes an iframe DOM node, replacing or removing it based on the replacement content.\n         *\n         * This function takes a DOM node representing an iframe, retrieves its replacement content asynchronously,\n         * and updates the DOM in one of the following ways:\n         * - Replaces the iframe's outer HTML with the retrieved replacement content if the content is not an empty string.\n         * - Removes the iframe from the DOM if the replacement content is an empty string.\n         *\n         * @param {HTMLElement} domNode - The iframe DOM node to be processed.\n         * @returns {Promise<void>} A promise that resolves when the processing is complete.\n         */\n        const processIframe = async(domNode) => {\n            const replacement = await getIframeReplacementContent(editor, domNode);\n            if (replacement !== '') {\n                domNode.outerHTML = replacement;\n            } else {\n                domNode.remove();\n                showIframeRemovalDialog = true;\n            }\n        };\n        if (domNode.hasChildNodes()) {\n            for (const node of domNode.childNodes) {\n                await iterateAsync(node);\n            }\n        }\n        if (domNode.classList !== undefined && domNode.classList.contains('edusharing_atto')) {\n            await processAddedOrEditedElement(domNode);\n        }\n        if (domNode.nodeType === Node.TEXT_NODE && domNode.textContent.includes('<iframe')) {\n            await processTextNode(domNode);\n        }\n        if (domNode instanceof HTMLIFrameElement\n            && domNode.classList !== undefined\n            && domNode.classList.contains('es-embed-iframe')) {\n            if (domNode.getAttribute('data-repo-id') === getRepoId(editor)) {\n                await processIframe(domNode);\n            }\n        }\n    };\n    const container = window.document.createElement('div');\n    container.innerHTML = editor.getContent();\n    await iterateAsync(container);\n    editor.setContent(container.innerHTML);\n    for (const resourceId of initialElements) {\n        await deleteEduSharingInstance({\n            eduDeleteStructure: {\n                id: resourceId,\n                courseId: parseInt(getCourseId(editor))\n            }\n        });\n    }\n    if (showIframeRemovalDialog) {\n        const translatedMessage = await new Promise((resolve) => {\n            getString('iframeRemovalInfo', 'tiny_edusharing').done(resolve);\n        });\n        const translatedTitle = await new Promise((resolve) => {\n            getString('iframeRemovalTitle', 'tiny_edusharing').done(resolve);\n        });\n        const modal = await Modal.create({\n            title: translatedTitle,\n            body: '<p>' + translatedMessage + '</p>',\n            footer: '<button type=\"button\" class=\"btn btn-primary\" data-action=\"confirm\">OK</button>',\n            show: true,\n            removeOnClose: true\n        });\n        await new Promise((resolve) => {\n            modal.getRoot().on('click', '[data-action=\"confirm\"]', resolve);\n            modal.getRoot().on('hidden.bs.modal', resolve);\n        });\n    }\n};\n\n/**\n * Asynchronously retrieves and processes replacement content for an ES embedding iframe, based on its attributes\n * and additional data fetched or computed during the process.\n *\n * @param {object} editor - The editor instance responsible for managing content operations.\n * @param {HTMLElement} domNode - The DOM node representing the iframe for which content replacement is executed.\n * @returns {Promise<string>} A promise that resolves to the HTML content for replacing the iframe,\n * or an empty string if processing fails or required data is unavailable.\n * @throws {Error} If an unexpected issue occurs during processing, resulting in a rejection with an empty string.\n */\nconst getIframeReplacementContent = async(editor, domNode) => {\n    const iframeSrc = domNode.getAttribute('src');\n    try {\n        const url = new URL(iframeSrc);\n        const urlSearchParams = url.searchParams;\n        const nodeId = urlSearchParams.get('node_id');\n        const version = urlSearchParams.get('version');\n        const mimeType = urlSearchParams.get('mimetype');\n        const title = domNode.getAttribute('title');\n        const mediaType = domNode.getAttribute('data-mediatype');\n        const width = domNode.getAttribute('width');\n        const height = domNode.getAttribute('height');\n        const ccrepUrl =\n            'ccrep://' +\n            encodeURIComponent(getRepoId(editor)) +\n            '/' +\n            encodeURIComponent(nodeId);\n        if (nodeId && version) {\n            const ajaxParams = {\n                eduStructure: {\n                    name: title,\n                    objectUrl: ccrepUrl,\n                    courseId: parseInt(getCourseId(editor)),\n                    objectVersion: version\n                }\n            };\n            const response = await addEduSharingInstance(ajaxParams);\n            if (response.id !== undefined) {\n                let previewUrl = `${Config.wwwroot}/mod/edusharing/preview.php`\n                    + '?resourceId=' + response.id + '&nodeId=' + nodeId + '&mimetype=' + mimeType\n                    + '&mediatype=' + mediaType + '&width=' + width + '&height=' + height;\n                const renderedTemplate = await renderForPromise(`${component}/content`, {\n                    edusharingImg: mediaType !== 'ref',\n                    edusharingRef: mediaType === 'ref',\n                    edusharingPreviewSrc: previewUrl,\n                    edusharingTitle: title.toString(),\n                    edusharingInsertCaption: false,\n                    edusharingCaption: '',\n                    edusharingWidth: width.toString(),\n                    edusharingHeight: height.toString(),\n                    edusharingStyle: '',\n                    dataEdited: false\n                });\n                return renderedTemplate.html;\n            }\n        }\n        return '';\n    } catch (e) {\n        return '';\n    }\n};\n\nexport const initExistingElements = editor => {\n    const iterate = domNode => {\n        if (domNode.hasChildNodes()) {\n            for (const node of domNode.childNodes) {\n                iterate(node);\n            }\n        }\n        if (domNode.classList !== undefined && domNode.classList.contains('edusharing_atto')) {\n            let link = domNode.getAttribute(domNode.nodeName.toLowerCase() === 'img' ? 'src' : 'href');\n            let uri = new URL(link);\n            initialElements.push(parseInt(uri.searchParams.get('resourceId')));\n        }\n    };\n    const container = window.document.createElement('div');\n    container.innerHTML = editor.getContent();\n    iterate(container);\n};\n"],"names":["editor","form","getContainer","closest","submit","addEventListener","async","event","submitter","id","preventDefault","convertForSubmit","initialElements","showIframeRemovalDialog","iterateAsync","domNode","hasChildNodes","node","childNodes","undefined","classList","contains","link","getAttribute","nodeName","toLowerCase","searchParams","URL","indexOfElement","indexOf","parseInt","get","splice","ajaxParams","eduStructure","courseId","objectUrl","window","console","log","removeAttribute","name","objectVersion","response","isImage","previewUrl","Config","wwwroot","toString","setAttribute","processAddedOrEditedElement","nodeType","Node","TEXT_NODE","textContent","includes","tempDiv","document","createElement","innerHTML","iframes","querySelectorAll","iframe","replacement","getIframeReplacementContent","outerHTML","remove","length","replaceWith","processTextNode","HTMLIFrameElement","processIframe","container","getContent","setContent","resourceId","eduDeleteStructure","translatedMessage","Promise","resolve","done","translatedTitle","modal","Modal","create","title","body","footer","show","removeOnClose","getRoot","on","iframeSrc","urlSearchParams","nodeId","version","mimeType","mediaType","width","height","ccrepUrl","encodeURIComponent","component","edusharingImg","edusharingRef","edusharingPreviewSrc","edusharingTitle","edusharingInsertCaption","edusharingCaption","edusharingWidth","edusharingHeight","edusharingStyle","dataEdited","html","e","iterate","uri","push"],"mappings":"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"}